name<-readline(prompt = "Enter the string:")
palindrome<-function(name){
a<-name
b<-substring(a,1:nchat(1),1:nchar(1))
str<-paste(b,sep="",collapse = "")
rev_str<-paste(rev(b),sep="",collapse = "")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome<-function(name){
a<-name
b<-substring(a,1:nchat(1),1:nchar(1))
str<-paste(b,sep="",collapse = "")
rev_str<-paste(rev(b),sep="",collapse = "")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
palindrome<-function(name){
a<-name
b<-substring(a,1:nchar(1),1:nchar(1))
str<-paste(b,sep="",collapse = "")
rev_str<-paste(rev(b),sep="",collapse = "")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
name<-readline(prompt="Enter the string:")
a<-name
b<-substring(a,1:ncha(1),1:nchar(1))
palindrome<-function(name){
a<-name
b<-substring(a,1:nchar(1),1:nchar(1))
str<-paste(b,sep="",collapse = "")
rev_str<-paste(rev(b),sep="",collapse = "")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
palindrome<-function(name){
a<-name
b<-substring(a,1:nchar(1),1:nchar(1))
str<-paste(b,sep="",collapse = " ")
rev_str<-paste(rev(b),sep="",collapse = " ")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
palindrome<-function(name){
a<-name
b<-substring(a,1:nchar(name),1:nchar(name))
str<-paste(b,sep=" ",collapse = " ")
rev_str<-paste(rev(b),sep=" ",collapse = " ")
if(str==rev_str){
cat("String is palindrom\n")
}else{
cat("String is not palindrom\n")
}
}
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
name<-readline(prompt="Enter the string:")
name<-readline(prompt="Enter the string:")
palindrome(name)
compute<-function(name){
cat("Name:",name,"\n")
num<-nchar(name)
cat("The number of characters in string",name,"are",num,"\n")
upp<-toupper(name)
cat("Name in upper case:",name,"\n")
ns<-nchar(name)+1
subs<-substring(name,ns%/%2,(ns+1)%/%2)
cat("The middle char of string are",subs,"\n")
}
name<-readline(prompt = "Enter the name:")
name<-readline(prompt = "Enter the name:")
compute(name)
compute<-function(name){
cat("Name:",name,"\n")
num<-nchar(name)
cat("The number of characters in string",name,"are",num,"\n")
upper<-to(name)
cat("Name in upper case:",upper,"\n")
ns<-nchar(name)+1
subs<-substring(name,ns%/%2,(ns+1)%/%2)
cat("The middle char of string are",subs,"\n")
}
name<-readline(prompt = "Enter the name:")
name<-readline(prompt = "Enter the name:")
compute(name)
compute<-function(name){
cat("Name:",name,"\n")
num<-nchar(name)
cat("The number of characters in string",name,"are",num,"\n")
upper<-toupper(name)
cat("Name in upper case:",upper,"\n")
ns<-nchar(name)+1
subs<-substring(name,ns%/%2,(ns+1)%/%2)
cat("The middle char of string are",subs,"\n")
}
name<-readline(prompt = "Enter the name:")
name<-readline(prompt = "Enter the name:")
compute(name)
setwd("~")
library()
library()
search()
.libPaths()
fruits<-c("Apple","banana","grapes")
count<-c(10,20,30)
plot(count,names.args=fruits,main="scatter-plot",xlab="fruits",ylab="count",col='blue')
fruits<-c("Apple","banana","grapes")
count<-c(10,20,30)
plot(count,names.args=fruits,type="l",main="scatter-plot",xlab="fruits",ylab="count",col='blue')
fruits<-c("Apple","banana","grapes")
count<-c(10,20,30)
plot(count,names.args=fruits,type="l",main="scatter-plot",xlab="fruits",ylab="count",col='blue')
plot(count,names.args=fruits,main="scatter-plot",xlab="fruits",ylab="count",col='blue')
data()
iris
data(iris)
library(ggplot2)
library(dplyr)
library(plotly)
data(iris)
iris
plt<-ggplot(iris(Sepal.Length,Petal.Length))
plt<-ggplot(iris(aes(x=Species,fill=Species)))+
geom_bar()
library(ggplot2)
library(dplyr)
library(plotly)
titanic<-read.csv("train.csv")
library(ggplot2)
library(dplyr)
library(plotly)
titanic<-read.csv("train.csv")
library(ggplot2)
library(dplyr)
library(plotly)
titanic<-read.csv("train.csv")
library(ggplot2)
library(dplyr)
library(plotly)
library(ggplot2)
print(titanic)
midf<-function(str)
{
print(nchar(str))
print(toupper(str))
n1<-nchar(str)+1
mc<-substring(str,n1%/%2,(n1+1)%/%2)
print(mc)
}
name<-readline("Enter your name:")
#b
is_palindrome<-function(x){
a<-substing(x,seq(1,nchr(x)),seq(1,nchar(x)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
midf<-function(str)
{
print(nchar(str))
print(toupper(str))
n1<-nchar(str)+1
mc<-substring(str,n1%/%2,(n1+1)%/%2)
print(mc)
}
name<-readline("Enter your name:")
midf(name)
#b
is_palindrome<-function(x){
a<-substing(x,seq(1,nchr(x)),seq(1,nchar(x)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(x){
a<-substing(x,seq(1,nchar(x)),seq(1,nchar(x)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substing(x,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substing(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep=" ",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep="",collapse="")==paste(a,sep=" ",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep="",collapse="")==paste(a,sep="",collapse="")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" ")
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-(paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" "))
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-(paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" "))
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-(paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" "))
if(b==TRUE){
paste(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-(paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" "))
if(b==TRUE){
cat(a,"is a palindrome")
}else{
paste(a,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
#b
is_palindrome<-function(str){
a<-substring(str,seq(1,nchar(str)),seq(1,nchar(str)))
#print(a)
b<-(paste(rev(a),sep="",collapse=" ")==paste(a,sep="",collapse=" "))
if(b==TRUE){
cat(str,"is a palindrome")
}else{
cat(str,"is not a palindrome")
}
}
str<-readline("enter string:")
is_palindrome(str)
library(dplyr)
library(ggplot2)
library(plotly)
library(ggplot2)
library(dplyr)
library(plotly)
titanic<-read.csv("Titanic_train.csv")
print(titanic)
titanic$Survived<-factor(titanic$Survived,levels=c("0","1"))
nlevels(titanic$Survived)
bar_chart<-ggplot(titanic,aes(x=factor(Pclass),fill=factor(Survived)))+
geom_bar(position = "dodge")+
labs(title = "Survivers in Passengers class",x="Passenger Class",y="Count",fill="Survived")+
scale_fill_manual(values = c("0"="red","1"="blue"))
print(bar_chart)
interactive_bar_chart<-ggplotly(bar_chart)
print(interactive_bar_chart)
line_plot<-ggplot(titanic,aes(x=Age,y=..density..))+
geom_density(fill="purple",alpha=0.5)+
labs(title = "Age Distribution of Passengers ",x="age",y="density")
print(line_plot)
interactive_line_plot<-ggplotly(density_plot)
scatter_plot<-ggplot(titanic,aes(x=Age,y=Fare,color=factor(Survived)))+
geom_point()+
labs(title = "fare vs Age",x="Age",y="fare")
scale_color_manual(values=c("0"="red","1"="green"))
print(scatter_plot)
interactive_scatter_chart<-ggplotly(scatter_plot)
print(interactive_scatter_chart)
heatmap<-ggplot(titanic,aes(x=Pclass,y=Survived))+
stat_bin_2d(bins = 10,aes(fill=..count..))+
labs(title = "Titanic Survival heatmap",x="pclass",y="survival",fill="frequency")+
scale_fill_continuous(name="frequency",low="blue",high="green")+
theme_minimal()
print(heatmap)
.libpaths()
library(ggplot2)
library(plotly)
library(dplyr)
titanic<-read.csv("C:/Users/Student/Downloads/RP DATA SET/RP DATA SET/Titanic_train.csv")
print(head(titanic))
titanic$Survived=factor(titanic$Survived,levels = c("0","1"))
nlevels(titanic$Survived)
bar_chart=ggplot(titanic,aes(x=factor(Pclass),fill=factor(Survived)))+geom_bar(position = "dodge")+
labs(title = "survivors by passenger class",x="passenger class",y="count",fill="survived")+
scale_fill_manual(values = c("0"="red","1"="blue"))
print(bar_chart)
interactive_bar_chart<-ggplotly(bar_chart)
interactive_bar_chart
line_plot<-ggplot(titanic,aes(x=Age,y=..density..))+geom_density(fill="blue",alpha=0.5)+
labs(title = "Age Distribution of passengers class",x="Age",y="Density")
print(line_plot)
interactive_line_plot<-ggplotly(line_plot)
interactive_line_plot
scatter_plot<-ggplot(titanic,aes(x=Age,y=Fare,color=factor(Survived)))+geom_point()+
labs(title="Fare vs Age",x="Age",y="Fare",color="Survived")+scale_color_manual(values=c("0"="red","1"="blue"))
print(scatter_plot)
interactive_scatter_plot<-ggplotly(scatter_plot)
interactive_scatter_plot
heatmap<-ggplot(titanic,aes(x=Pclass,y=Survived))+stat_bin_2d(bins = 10,aes(fill=..count..))+
labs(title="titanic survival heatmap",x="Pclass",y="Survived",fill="Frequency")+
scale_fill_continuous(name="Frequency",low="white",high="blue")+theme_minimal()
print(heatmap)
interactive_heatr_plot<-ggplotly(heatmap)
interactive_heatr_plot
ggsave("bar_plot.png",plot=bar_chart,width = 8,height = 6)
ggsave("line_plot.png",plot=line_plot,width = 8,height = 6)
ggsave("scatter_plot.png",plot=scatter_plot,width = 8,height = 6)
ggsave("titanic_heatmap.png",plot=heatmap,width = 8,height = 6)
library(ggplot2)
library(plotly)
library(dplyr)
titanic<-read.csv("C:/Users/Student/Downloads/RP DATA SET/RP DATA SET/Titanic_train.csv")
print(head(titanic))
titanic$Survived=factor(titanic$Survived,levels = c("0","1"))
nlevels(titanic$Survived)
bar_chart=ggplot(titanic,aes(x=factor(Pclass),fill=factor(Survived)))+geom_bar(position = "dodge")+
labs(title = "survivors by passenger class",x="passenger class",y="count",fill="survived")+
scale_fill_manual(values = c("0"="red","1"="blue"))
print(bar_chart)
interactive_bar_chart<-ggplotly(bar_chart)
library(ggplot2)
library(plotly)
library(dplyr)
titanic<-read.csv("C:/Users/Student/Downloads/RP DATA SET/RP DATA SET/Titanic_train.csv")
print(head(titanic))
titanic$Survived=factor(titanic$Survived,levels = c("0","1"))
nlevels(titanic$Survived)
bar_chart=ggplot(titanic,aes(x=factor(Pclass),fill=factor(Survived)))+geom_bar(position = "dodge")+
labs(title = "survivors by passenger class",x="passenger class",y="count",fill="survived")+
scale_fill_manual(values = c("0"="red","1"="blue"))
print(bar_chart)
interactive_bar_chart<-ggplotly(bar_chart)
interactive_bar_chart
line_plot<-ggplot(titanic,aes(x=Age,y=..density..))+geom_density(fill="blue",alpha=0.5)+
labs(title = "Age Distribution of passengers class",x="Age",y="Density")
print(line_plot)
interactive_line_plot<-ggplotly(line_plot)
interactive_line_plot
scatter_plot<-ggplot(titanic,aes(x=Age,y=Fare,color=factor(Survived)))+geom_point()+
labs(title="Fare vs Age",x="Age",y="Fare",color="Survived")+scale_color_manual(values=c("0"="red","1"="blue"))
print(scatter_plot)
interactive_scatter_plot<-ggplotly(scatter_plot)
interactive_scatter_plot
heatmap<-ggplot(titanic,aes(x=Pclass,y=Survived))+stat_bin_2d(bins = 10,aes(fill=..count..))+
labs(title="titanic survival heatmap",x="Pclass",y="Survived",fill="Frequency")+
scale_fill_continuous(name="Frequency",low="white",high="blue")+theme_minimal()
print(heatmap)
interactive_heatr_plot<-ggplotly(heatmap)
interactive_heatr_plot
ggsave("bar_plot.png",plot=bar_chart,width = 8,height = 6)
ggsave("line_plot.png",plot=line_plot,width = 8,height = 6)
ggsave("scatter_plot.png",plot=scatter_plot,width = 8,height = 6)
ggsave("titanic_heatmap.png",plot=heatmap,width = 8,height = 6)
heatmap<-ggplot(titanic,aes(x=Pclass,y=Survived))+stat_bin_2d(bins = 10,aes(fill=..count..))+
labs(title="titanic survival heatmap",x="Pclass",y="Survived",fill="Frequency")+
scale_fill_continuous(name="Frequency",low="white",high="blue")+theme_minimal()
print(heatmap)
interactive_heatr_plot<-ggplotly(heatmap)
interactive_heatr_plot
library(ggplot2)
library(plotly)
library(dplyr)
titanic<-read.csv("C:/Users/Student/Downloads/RP DATA SET/RP DATA SET/Titanic_train.csv")
print(head(titanic))
titanic$Survived=factor(titanic$Survived,levels = c("0","1"))
nlevels(titanic$Survived)
bar_chart=ggplot(titanic,aes(x=factor(Pclass),fill=factor(Survived)))+geom_bar(position = "dodge")+
labs(title = "survivors by passenger class",x="passenger class",y="count",fill="survived")+
scale_fill_manual(values = c("0"="red","1"="blue"))
print(bar_chart)
interactive_bar_chart<-ggplotly(bar_chart)
interactive_bar_chart
interactive_bar_chart<-ggplotly(bar_chart)
interactive_bar_chart
interactive_line_plot<-ggplotly(line_plot)
interactive_line_plot
interactive_scatter_plot<-ggplotly(scatter_plot)
interactive_scatter_plot
interactive_heatr_plot<-ggplotly(heatmap)
interactive_heatr_plot
setwd("C:/Users/Student/Desktop/NNM24CS305")
